from datetime import datetime

import numpy as np
import pandas as pd


def get_stamp_info(data):
    date_dict_os = np.load('data/OSVersionTimestamps.npy', allow_pickle=True)[()]
    date_dict_as = np.load('data/AvSigVersionTimestamps.npy', allow_pickle=True)[()]

    date_av_sig_version = None
    date_os_version = None

    if data['AvSigVersion'] in date_dict_as:
        date_av_sig_version = date_dict_as[data['AvSigVersion']]

    if data['Census_OSVersion'] in date_dict_os:
        date_os_version = date_dict_os[data['Census_OSVersion']]

    if date_av_sig_version is None:
        date_av_sig_version = datetime(2018, 7, 26)

    if date_os_version is None:
        date_os_version = datetime(2018, 7, 26)

    data['Lag1'] = (date_av_sig_version - date_os_version).days // 7
    data['Lag2'] = (datetime(2018, 7, 26) - date_av_sig_version).days // 1

    if data['Lag2'] < 0:
        data['Lag2'] = 0

    data['DriveA'] = data['Census_SystemVolumeTotalCapacity'] / data['Census_PrimaryDiskTotalCapacity']
    data['DriveB'] = data['Census_PrimaryDiskTotalCapacity'] / data['Census_SystemVolumeTotalCapacity']

    return data


def convert_categories_variable(df):
    category_columns = list(df.select_dtypes(include=['category', 'object']).columns)

    for index, row in df.iterrows():
        for category in category_columns:
            dictionary = np.load('data/dictionary/' + category + '.npy', allow_pickle=True).tolist()
            if row[category] in dictionary:
                df.at[index, category] = dictionary[row[category]]
            else:
                df.at[index, category] = 0

            df[category] = pd.to_numeric(df[category], downcast="float")

    return df


def prepare_time_stamp_info(train):
    date_dict_os = np.load('data/OSVersionTimestamps.npy', allow_pickle=True)[()]
    train['DateOS'] = train['Census_OSVersion'].map(date_dict_os)

    date_dict_as = np.load('data/AvSigVersionTimestamps.npy', allow_pickle=True)[()]
    train['DateAS'] = train['AvSigVersion'].map(date_dict_as)

    train['Lag1'] = train['DateAS'] - train['DateOS']
    train['Lag1'] = train['Lag1'].map(lambda x: x.days // 7).replace(np.NAN, 0)

    train['Lag2'] = datetime(2018, 7, 26) - train['DateAS']
    train['Lag2'] = train['Lag2'].map(lambda x: x.days // 1).replace(np.NAN, 0)

    train.loc[train['Lag2'] < 0, 'Lag2'] = 0
    train['Lag2'] = train['Lag2'].astype('float32')

    return train.drop(['DateOS', 'DateAS'], axis=1)


def prepare_data(data):
    device_dictionary = {}
    for (k, v) in data.items():
        device_dictionary[k] = v['name']

    device_dictionary = get_stamp_info(device_dictionary)
    df = pd.DataFrame([device_dictionary])

    codes = np.load("data/codes.npy", allow_pickle=True)
    df['CountryIdentifier'] = codes.item().get(df['CountryIdentifier'].values[0])

    df = split_data(df)
    df = convert_categories_variable(df)
    return df


def split_data(train):
    train['AppVersion'] = train['AppVersion'].str.split('.').str[0:3].str.join('.')
    train['AvSigVersion'] = train['AvSigVersion'].str.split('.').str[0:2].str.join('.')
    train['Census_OSVersion'] = train['Census_OSVersion'].str.split('.').str[0:2].str.join('.')
    train['CoreCountMDiagonal'] = train['Census_ProcessorCoreCount'] * train[
        'Census_InternalPrimaryDiagonalDisplaySizeInInches']
    train['CoreCountMRAM'] = train['Census_ProcessorCoreCount'] * train['Census_TotalPhysicalRAM']
    return train


def prepare_data_for_train(train):
    train = split_data(train)
    category_columns = list(train.select_dtypes(include=['category', 'object']).columns)

    for category in category_columns:
        for index, row in train.iterrows():
            dictionary = np.load('data/dictionary/' + category + '.npy', allow_pickle=True).tolist()
            if row[category] in dictionary:
                train.at[index, category] = dictionary[row[category]]
            else:
                train.at[index, category] = 0

        train[category] = pd.to_numeric(train[category], downcast="float")

    train = prepare_time_stamp_info(train)

    train['driveA'] = train['Census_SystemVolumeTotalCapacity'].astype('float') / train[
        'Census_PrimaryDiskTotalCapacity'].astype('float')
    train['driveB'] = train['Census_PrimaryDiskTotalCapacity'].astype('float') - train[
        'Census_SystemVolumeTotalCapacity'].astype('float')

    train['CoreCountMDiagonal'] = train['Census_ProcessorCoreCount'] * train[
        'Census_InternalPrimaryDiagonalDisplaySizeInInches']
    train['CoreCountMRAM'] = train['Census_ProcessorCoreCount'] * train['Census_TotalPhysicalRAM']

    return train

