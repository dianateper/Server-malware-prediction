import gc
import json
import logging
import numpy as np
import pandas as pd
from flask import Flask, jsonify, request, make_response
import data_preparation
from const_models import LIGHT_GBM_MODEL, ITERATION_MODELS
from models.iteration_model import make_prediction_iteration_model, \
    retrain_one_iteration_model, retrain_iteration_model, train_iteration_model
from models.light_gbm import make_prediction_light_gbm, retrain_one_light_gbm, retrain_light_gbm, train_light_gbm
import logging.config
from logging.config import dictConfig
from rq import Queue
from worker import conn


app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
app.config['FLASK_ENV'] = "development"
app.config['FLASK_DEBUG'] = 1

q = Queue(connection=conn)

dictConfig({
    'version': 1,
    'formatters': {'default': {
        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
    }},
    'handlers': {'wsgi': {
        'class': 'logging.StreamHandler',
        'stream': 'ext://flask.logging.wsgi_errors_stream',
        'formatter': 'default'
    }},
    'root': {
        'level': 'INFO',
        'handlers': ['wsgi']
    }
})

gunicorn_logger = logging.getLogger('gunicorn.error')
app.logger.handlers.extend(gunicorn_logger.handlers)
app.logger.setLevel(logging.DEBUG)


@app.route('/device-info', methods=['POST'])
def device_info():
    device = data_preparation.prepare_data(request.json)
    return jsonify({'device': device.reset_index().to_json(orient='records')})


@app.route('/predictions', methods=['POST'])
def make_prediction():
    models = request.json['models']
    device = data_preparation.prepare_data(request.json['device'])

    predictions = {}
    for model in models:
        if model == LIGHT_GBM_MODEL:
            predictions[model] = make_prediction_light_gbm(device)
        if model in ITERATION_MODELS:
            predictions[model] = make_prediction_iteration_model(device, model)
    del models, device
    gc.collect()
    predictions = {'models': predictions}
    return make_response(predictions, 200)


@app.route('/get-models', methods=['GET'])
def get_all_models():
    return jsonify([LIGHT_GBM_MODEL] + ITERATION_MODELS)


@app.route('/train', methods=['GET', 'POST'])
def train_model():
    model_name = request.json['models'][0]
    job = train(model_name, train_light_gbm, train_iteration_model)
    return job.id


@app.route('/retrain', methods=['POST', 'GET'])
def retrain_models():
    json_device = json.loads(json.dumps(request.json['device']))
    model_name = request.json['models'][0]

    df = pd.read_json(json_device, orient='records')
    df = data_preparation.prepare_data_for_train(df)

    job = train(model_name, retrain_light_gbm, retrain_iteration_model, df)

    return job.id


def train(model_name, light_gbm_handler, iteration_model_handler, df=None):
    job = None
    if model_name == LIGHT_GBM_MODEL:
        job = q.enqueue(light_gbm_handler, df, job_timeout=1800)  # 30 minutes
    if model_name in ITERATION_MODELS:
        job = q.enqueue(iteration_model_handler, df, model_name, job_timeout=3600)  # 30 minutes
    return job


@app.route('/retrain-one', methods=['POST', 'GET'])
def retrain_one_models():
    device = request.json['device']
    models = request.json['models']

    df = data_preparation.prepare_data(device)
    df = df.replace(np.nan, 0)

    for model in models:
        if model == LIGHT_GBM_MODEL:
            job = q.enqueue(retrain_one_light_gbm, df, job_timeout=60)  # 30 minutes
        if model in ITERATION_MODELS:
            job = q.enqueue(retrain_one_iteration_model, df, model, job_timeout=60)
        logging.info("train: " + str(job.id))

    return make_response({"models": models}), 200


if __name__ == '__main__':
    gunicorn_logger = logging.getLogger('gunicorn.error')
    app.logger.handlers = gunicorn_logger.handlers
    app.logger.setLevel(gunicorn_logger.level)
    app.run()
