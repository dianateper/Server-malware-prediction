import gc
import logging

import lightgbm as lgb
import pandas as pd
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split

PARAMS = {'reg_alpha': 0.6674054479685403,
              'reg_lambda': 0.6580340445201492,
              'num_leaves': 109,
              'subsample_for_bin': 14369,
              'subsample': 0.9817877061302219,
              'min_child_samples': 108,
              'colsample_bytree': 0.5282194578158498,
              'learning_rate': 0.09185422914095694,
              'n_estimators': 1876}

FILE_NAME = "light-gbm1.txt"

x_test = y_test = None
score = 0
df_to_retrain = pd.DataFrame()


def light_gbm_fit(x_train, y_train, train_ratio, estimator=None):
    global x_test, y_test, score
    validation_ratio = (1 - train_ratio)/2
    test_ratio = (1 - train_ratio)/2
    x_val, x_test, y_val, y_test = train_test_split(x_test, y_test,
                                                    test_size=test_ratio / (test_ratio + validation_ratio))
    eval_result = {}
    estimator = lgb.train(PARAMS,
                          init_model=estimator,
                          train_set=lgb.Dataset(x_train, y_train),
                          valid_sets=[lgb.Dataset(x_train, y_train), lgb.Dataset(x_val, y_val)],
                          keep_training_booster=True,
                          evals_result=eval_result,
                          num_boost_round=500)
    y_pred = estimator.predict(x_test)
    score = roc_auc_score(y_test, y_pred)
    logging.info('Score: ' + str(score))

    estimator.save_model(FILE_NAME)
    gc.collect()


def train(data, train_ratio, estimator=None):
    global x_test, y_test
    x = data.drop(['HasDetections'], axis=1)
    y = data['HasDetections']

    logging.info("####### BEGIN TRAINING #######")
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1 - train_ratio)
    light_gbm_fit(x_train, y_train, train_ratio=train_ratio, estimator=estimator)
    logging.info('####### END TRAINING #######')
    del x, y, x_train, y_train
    gc.collect()


def train_light_gbm(df):
    global score
    for df in pd.read_csv('data/data2.csv', low_memory=True, chunksize=100_000):
        logging.info("light-gbm begin train")
        train_ratio = 0.98
        train(df, train_ratio)
    return 'light-gbm', score


def retrain_light_gbm(data):
    train_ratio = 0.8
    train(data, train_ratio, FILE_NAME)
    return "light-gbm"


def retrain_one_light_gbm(data):
    global x_test, y_test, df_to_retrain, score
    df_to_retrain = data.append(df_to_retrain, ignore_index=True)

    if len(df_to_retrain) > 1000:
        x_train = data.drop(['HasDetections'], axis=1)
        y_train = data['HasDetections']
        estimator = lgb.train(PARAMS,
                              init_model=FILE_NAME,
                              train_set=lgb.Dataset(x_train, y_train),
                              keep_training_booster=True,
                              num_boost_round=500)
        # score = roc_auc_score(y_test, estimator.predict(x_test))
        df_to_retrain = pd.DataFrame()
        estimator.save_model(FILE_NAME)


def make_prediction_light_gbm(df):
    bst = lgb.Booster(model_file=FILE_NAME)
    res = round(bst.predict(df.iloc[:1])[0]*100, 2)
    del bst
    gc.collect()
    return res
